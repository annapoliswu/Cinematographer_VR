using Normal.Realtime;
using Normal.Realtime.Serialization;
using System;
using UnityEngine;

namespace SILvr.Avatars
{
    [RealtimeModel]
    public partial class SILvrAvatarModel
    {
        [RealtimeProperty(1, true)]
        private PoseType _poseTrigger;
        [RealtimeProperty(2, true)]
        private PoseType _poseType;
        [RealtimeProperty(3, true)]
        private bool _requirePosition;
        [RealtimeProperty(4, true)]
        private Vector3 _position;

        private PoseType _oldPoseTrigger;

        // Action invoked after deserialization
        public Action onPoseChangeEvent;

        // Trigger pose change event with unspecified position
        public void TriggerPoseChangeEvent(PoseType poseType)
        {
            this.poseTrigger++;
            this.poseType = poseType;
            this.requirePosition = false;
        }

        // Trigger pose change event with specified position

        public void TriggerPoseChangeEvent(PoseType poseType, Vector3 position)
        {
            this.poseTrigger++;
            this.poseType = poseType;
            this.requirePosition = true;
            this.position = position;
        }

        // Called after deserialization
        [RealtimeCallback(RealtimeModelEvent.OnDidRead)]
        private void DidRead()
        {
            // Check if a new pose change event has been triggered
            if (poseTrigger != _oldPoseTrigger)
            {
                // If so, invoke the callback
                onPoseChangeEvent?.Invoke();

                // Update comparison value
                _oldPoseTrigger = poseTrigger;
            }
        }
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace SILvr.Avatars {
    public partial class SILvrAvatarModel : RealtimeModel {
        public SILvr.Avatars.PoseType poseTrigger {
            get {
                return (SILvr.Avatars.PoseType) _poseTriggerProperty.value;
            }
            set {
                if (_poseTriggerProperty.value == (uint) value) return;
                _poseTriggerProperty.value = (uint) value;
                InvalidateReliableLength();
            }
        }
        
        public SILvr.Avatars.PoseType poseType {
            get {
                return (SILvr.Avatars.PoseType) _poseTypeProperty.value;
            }
            set {
                if (_poseTypeProperty.value == (uint) value) return;
                _poseTypeProperty.value = (uint) value;
                InvalidateReliableLength();
            }
        }
        
        public bool requirePosition {
            get {
                return _requirePositionProperty.value;
            }
            set {
                if (_requirePositionProperty.value == value) return;
                _requirePositionProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public UnityEngine.Vector3 position {
            get {
                return _positionProperty.value;
            }
            set {
                if (_positionProperty.value == value) return;
                _positionProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            PoseTrigger = 1,
            PoseType = 2,
            RequirePosition = 3,
            Position = 4,
        }
        
        #region Properties
        
        private ReliableProperty<uint> _poseTriggerProperty;
        
        private ReliableProperty<uint> _poseTypeProperty;
        
        private ReliableProperty<bool> _requirePositionProperty;
        
        private ReliableProperty<UnityEngine.Vector3> _positionProperty;
        
        #endregion
        
        public SILvrAvatarModel() : base(null) {
            _poseTriggerProperty = new ReliableProperty<uint>(1, (uint) _poseTrigger);
            _poseTypeProperty = new ReliableProperty<uint>(2, (uint) _poseType);
            _requirePositionProperty = new ReliableProperty<bool>(3, _requirePosition);
            _positionProperty = new ReliableProperty<UnityEngine.Vector3>(4, _position);
            
            SubscribeEventCallback(Normal.Realtime.RealtimeModelEvent.OnDidRead, DidRead);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _poseTriggerProperty.UnsubscribeCallback();
            _poseTypeProperty.UnsubscribeCallback();
            _requirePositionProperty.UnsubscribeCallback();
            _positionProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _poseTriggerProperty.WriteLength(context);
            length += _poseTypeProperty.WriteLength(context);
            length += _requirePositionProperty.WriteLength(context);
            length += _positionProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _poseTriggerProperty.Write(stream, context);
            writes |= _poseTypeProperty.Write(stream, context);
            writes |= _requirePositionProperty.Write(stream, context);
            writes |= _positionProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.PoseTrigger: {
                        changed = _poseTriggerProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.PoseType: {
                        changed = _poseTypeProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.RequirePosition: {
                        changed = _requirePositionProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.Position: {
                        changed = _positionProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _poseTrigger = poseTrigger;
            _poseType = poseType;
            _requirePosition = requirePosition;
            _position = position;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
