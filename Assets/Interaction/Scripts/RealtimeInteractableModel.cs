using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace SILvr.Interaction
{
    [RealtimeModel(true)]
    public partial class RealtimeInteractableModel
    {
        [RealtimeProperty(1, true, true)]
        private bool _selected;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace SILvr.Interaction {
    public partial class RealtimeInteractableModel : RealtimeModel {
        public bool selected {
            get {
                return _selectedProperty.value;
            }
            set {
                if (_selectedProperty.value == value) return;
                _selectedProperty.value = value;
                InvalidateReliableLength();
                FireSelectedDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(RealtimeInteractableModel model, T value);
        public event PropertyChangedHandler<bool> selectedDidChange;
        
        public enum PropertyID : uint {
            Selected = 1,
        }
        
        #region Properties
        
        private ReliableProperty<bool> _selectedProperty;
        
        #endregion
        
        public RealtimeInteractableModel() : base(new MetaModel()) {
            _selectedProperty = new ReliableProperty<bool>(1, _selected);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _selectedProperty.UnsubscribeCallback();
        }
        
        private void FireSelectedDidChange(bool value) {
            try {
                selectedDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = MetaModelWriteLength(context);
            length += _selectedProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            WriteMetaModel(stream, context);
            
            var writes = false;
            writes |= _selectedProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case MetaModel.ReservedPropertyID: {
                        ReadMetaModel(stream, context);
                        break;
                    }
                    case (uint) PropertyID.Selected: {
                        changed = _selectedProperty.Read(stream, context);
                        if (changed) FireSelectedDidChange(selected);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _selected = selected;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
